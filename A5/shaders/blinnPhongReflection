#version 150

struct LightSource {
  //position in view space
  vec4 position;
  // ambient color
  vec4 ambient;
  // diffuse color
  vec4 diffuse;
};

struct Material {
  // ambient color
  vec4 ambient;
  // diffuse color
  vec4 diffuse;
};

const int MAX_LIGHTS = 5;
uniform LightSource lightSource[MAX_LIGHTS];
uniform Material material;
uniform float numLights;

// position and normal in view space
vec4 blinnPhongReflection(vec4 position, vec3 normal){
	vec4 light = vec4(0.f);

	for(int i = 0; i < MAX_LIGHTS; ++i) {
		// Calculate the ambient color
		vec4 ambientColor = lightSource[i].ambient * material.ambient;

		// Calculate the light direction and the strength of the diffuse light
		vec3 lightDirection = normalize(lightSource[i].position.xyz - position.xyz);
		float diffAngle = max(dot(lightDirection, normal), 0.);

		// Calculate the diffuse color
		vec4 diffuseColor = diffAngle * lightSource[i].diffuse * material.diffuse;

		light += clamp(ambientColor + diffuseColor, 0.0, 1.0) / numLights;
	}

	light.w = 1.f;
	
	// Return the final color
	return light;
}