#version 150

struct LightSource {
  //position in view space
  vec4 position;
  // ambient color
  vec4 ambient;
  // diffuse color
  vec4 diffuse;
  // specular color
  vec4 specular;
};

struct Material {
  // ambient color
  vec4 ambient;
  // diffuse color
  vec4 diffuse;
  // specular color
  vec4 specular;
  // shininess
  float shininess;
};

uniform LightSource lightSource;
uniform Material material;

// position and normal in view space
vec4 blinnPhongReflection(vec4 position, vec3 normal){
	// Calculate the ambient color
	vec4 ambientColor = lightSource.ambient * material.ambient;

	// Calculate the light direction and the strength of the diffuse light
	vec3 lightDirection = normalize(lightSource.position.xyz - position.xyz);
	float diffAngle = max(dot(lightDirection, normal), 0.);

	// Calculate the diffuse color
	vec4 diffuseColor = diffAngle * lightSource.diffuse * material.diffuse;


	// If the diffuse intensity is more than 0 calculate the specular component
	float specularIntensity = 0.;
	if(diffAngle > 0) {
		// Calculate the specular angle (eye position is (0.0, 0.0, 0.0, 1.0))
		vec3 H = normalize(lightDirection - position.xyz);
		float specAngle = max(dot(H, normal), 0.0);

		// Calculate the specular intensity
		specularIntensity = pow(specAngle, material.shininess);
	}

	// Calculate the specular color
	vec4 specularColor = lightSource.specular * material.specular * specularIntensity;

	// Return the final color
	return ambientColor + diffuseColor + specularColor;
}